import random
import sys
import os
import typing
import MN_queue
sys.path.append("../")
from LLS.LLS import DSAST, mapBASTtoDSAST, GAST
from LLS.DAS import DPAST, mapDSASTtoDPAST

gastTable = {} 
mn_q = MN_queue()
running_queue = []
waiting_queue = []
sleeping_queue = []

class PMU:
	def __init__(self, permissions=bytes(2), encrypt=None, addr=None, CAST):
		global gastTable
		global procID
		global dsastTable
		global procsActive
		global procsWaiting
	
	
	blocked_queue = [] # queue for processes that become blocked
	time_queue = [] # queue for processes that become initially created
	work_queue = [] # queue for processes that are waiting to be executed and running
	cpu_process = Process(-1, "test")

class CAS:
	def __init__(self):
		
		
class Proc:
	def __init__(self, ID, DSAST, GAST=GAST()):
		self.ID = 0 #need to figure out CAS values
		self.status = 0 # waiting = 0, running = 1, sleeping = 2
		self.DSAST = DSAST() #from LLS
		self.GAST = GAST 
		self.DPAST = DPAST(size=0, DSAST=self.DSAST)
		self.priority = 0 #influences how much run time it gets 
		# need to figure out values for these
		self.data = 0
		self.heap = 0
		self.stack = 0
	

#Step 1
	#def receiveGAST(self, offset): 
	#PN sends GAST to PMU would eventually be a message that comes from the PN
	# when PMU gets this message, it executes the next steps
	#testGAST = GAST() # in future we need actual GAST from PN/LLS
	#	return acknowledged

#Step 2
	def sendGAST(self): 
	#call mapBASTtoDSAST (dsast=null,gast=dumby from step 1) in LLS.py does step 2 and 3
		self.DSAST = mapBASTtoDSAST(DSAST=self.DSAST, GAST=self.GAST)
		return 

#Step 3+4
	#function creates an entry in the DPAST->DSAST table 
	#The DPAST would be generated by the PMU (have to confirm with Dave) 
	#The DSAST is the one returned from the LLS

	def updateCAS(self): 
		mapDSASTtoDPAST(self.DSAST)
		return 
	
#Step 5
	def sendDPAST(self): 
	#PMU sends DPAST to PN
	#Would be a call to the PN simulator with the associated DPAST program
	#Raghul will help with		
		return 

if __name__ == '__main__':
