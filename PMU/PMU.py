import random
import sys
import os
import typing

sys.path.append("../")
from LLS.LLS import DSAST, mapBASTtoDSAST, GAST
from LLS.DAS import DPAST, mapDSASTtoDPAST
from lib.MN_Queue import MN_queue

gastTable = {} 
mn_q = MN_queue()
running_queue = []
waiting_queue = []
sleeping_queue = []
'''
class PMU:
	def __init__(self, permissions=bytes(2), encrypt=None, addr=None, CAST=None):
		global gastTable
		global procID
		global dsastTable
		global procsActive
		global procsWaiting
	
	
	blocked_queue = [] # queue for processes that become blocked
	time_queue = [] # queue for processes that become initially created
	work_queue = [] # queue for processes that are waiting to be executed and running
	cpu_process = Process(-1, "test")
'''
class CAST:
	def __init__(self, gast=GAST()):
		self.index = random.getrandbits(20)  # actual CAST is this 20-bit tag
		self.mnq = MN_queue()
		self.gast = gast

class Proc:
	def __init__(self, ID=0, DSAST=DSAST(), GAST=GAST()):
		self.ID = 0 #need to figure out CAS values
		self.status = 0 # waiting = 0, running = 1, sleeping = 2
		self.DSAST = DSAST #from LLS
		self.GAST = GAST 
		self.DPAST = DPAST(size=0, DSAST=self.DSAST)
		self.prog = CAST(gast=GAST)
		self.threads = [CAST(gast=GAST)]  ## need to determine how many CASTS to initialize, maybe more casts are added at runtime. one for each thread
		self.priority = 0 #influences how much run time it gets 
		self.stdin = GAST()
		self.stdout = GAST()
		self.strerr = GAST()


#Functions suggested by John (get on same page before deleting)
#	def respondToPN(self, count):
#		message = (data, wait, interrupt, acknowledge)
#		return message
#	# Wait - actual delay 
#	# Acknowledge - PMU receives process
	
#	def requestCache(self, value, offset):
#		return acknowledged

#Step 1
	#def receiveGAST(self, offset): 
	#PN sends GAST to PMU would eventually be a message that comes from the PN
	# when PMU gets this message, it executes the next steps
	#testGAST = GAST() # in future we need actual GAST from PN/LLS
	#	return acknowledged

#Step 2
	def sendGAST(self): 
	#call mapBASTtoDSAST (dsast=null,gast=dumby from step 1) in LLS.py does step 2 and 3
		self.DSAST = mapBASTtoDSAST(DSAST=self.DSAST, GAST=self.GAST)
		return 

#Step 3+4
	#function creates an entry in the DPAST->DSAST table 
	#The DPAST would be generated by the PMU (have to confirm with Dave) 
	#The DSAST is the one returned from the LLS

	def updateCAS(self): 
		mapDSASTtoDPAST(self.DSAST)
		return 
	
#Step 5
	def sendDPAST(self): 
	#PMU sends DPAST to PN
	#Would be a call to the PN simulator with the associated DPAST program
	#Raghul will help with		
		return 

if __name__ == '__main__':
	pass